esphome:
  name: hackem-doorlock

esp32:
  board: featheresp32
  framework:
    type: arduino

# Enable logging
logger:

globals:
  - id: wifi_connected
    type: bool
    restore_value: no
    initial_value: "false"
  - id: mqtt_connected
    type: bool
    restore_value: no
    initial_value: "false"
    
interval:
  - interval: 1s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connected) = true;
          else:
            - lambda: |-
                id(wifi_connected) = false;

mqtt:
  broker: 192.168.1.100
  username: door
  password: !secret mqtt_password
  on_connect:
    - lambda: |-
        id(mqtt_connected) = true;
  on_disconnect:
    - lambda: |-
        id(mqtt_connected) = false;
  on_message:
    topic: door
    payload: "1"
    then:
      - switch.turn_on: relay
      - mqtt.publish:
          topic: door
          payload: "zhopa"
          retain: true

api:
  encryption:
    key: !secret doorlock_apikey

ota:
  password: !secret ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "HackemLock Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:
    
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

font:
  - file: "gfonts://Roboto"
    id: roboto_12
    size: 12

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button Input 0"
    id: tdisplay_button_input_0
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button Input 1"
    id: tdisplay_button_input_1
    on_click:
      - switch.turn_on: relay
      - mqtt.publish:
          topic: door
          payload: "zhopa"
          retain: true

# We can still control the backlight independently
switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
  - platform: gpio
    name: "Door Relay"
    id: relay
    pin: 
      number: GPIO27
      inverted: true
      mode:
        open_drain: true
        output: true
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay

image:
  - file: "doorlock/flag.png"
    id: british_flag
    resize: 200x100
    type: RGB24
  - file: "doorlock/error.png"
    id: error_icon
    resize: 100x100
    type: RGB24

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

web_server:
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_gray));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_gray));   // header bar

      it.print(5, 5, id(roboto_12), id(my_yellow), TextAlign::TOP_LEFT, "Hacker Embassy");


      //if (id(system_status).state) {
      if (id(mqtt_connected)) {
        // Comment out the above lines to see the image without text overlaid
        it.image(20, 25, id(british_flag));
        it.print(235, 5, id(roboto_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.image(82, 34, id(error_icon));
        it.print(235, 5, id(roboto_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
        if (id(wifi_connected)) {
            it.print(120, 115, id(roboto_12), id(my_green), TextAlign::TOP_CENTER, "Wi-Fi connected");
        } else {
            it.print(120, 115, id(roboto_12), id(my_red), TextAlign::TOP_CENTER, "Wi-Fi disconnected");
        }
      }

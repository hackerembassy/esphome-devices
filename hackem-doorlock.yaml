esphome:
  name: hackem-doorlock
  friendly_name: "Hackem Doorlock"
  board: featheresp32
  platform: esp32
  on_shutdown:
    priority: -200
    then:
      - display.page.show: page_reset
      - component.update: my_display
      - light.turn_off: 
          id: backlight
          transition_length: 0s

# Enable logging
logger:

globals:
  - id: wifi_connected
    type: bool
    restore_value: no
    initial_value: "false"
  - id: ota_progress
    type: float
    restore_value: no
  - id: mqtt_connected
    type: bool
    restore_value: no
    initial_value: "false"
    
interval:
  - interval: 1000ms
    then:
      - if:
          condition:
            - wifi.connected:
          then:
            - if:
                condition:
                  not:
                    mqtt.connected:
                then:
                  - lambda: |-
                      id(wifi_connected) = true;
                  - script.execute: status_wifi_connected
          else:
            - lambda: |-
                id(wifi_connected) = false;
            - script.execute: status_no_connection

mqtt:
  broker: 192.168.1.1
  username: door
  password: !secret mqtt_password
  on_connect:
    - lambda: |-
        id(mqtt_connected) = true;
    - script.execute: status_ready
  on_disconnect:
    - lambda: |-
        id(mqtt_connected) = false;
    - script.execute: status_wifi_connected
  on_message:
    topic: door
    payload: "1"
    then:
      - mqtt.publish:
          topic: door/response
          payload: "unlocked"
      - switch.turn_on: relay
      - mqtt.publish:
          topic: door
          payload: "zhopa"
          retain: true

api:
  encryption:
    key: !secret doorlock_apikey

ota:
  password: !secret ota_pass
  on_progress:
    then:
      - lambda: |-
          id(ota_progress) = x;
      - component.update: my_display
  on_begin:
    then:
      - light.turn_on: 
          id: backlight
          brightness: 100%
          transition_length: 0.5s
      - display.page.show: page_ota
      - component.update: my_display
  on_end:
    then:
      - display.page.show: page_reset
      - component.update: my_display
  on_error:
    then:
      - script.execute: gui_reset

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  ap:
    ssid: "Hackem Fallback"
    password: !secret wifi_fallback_password

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "T-Display Button 0"
    id: tdisplay_button_input_0
    on_double_click:
      - button.press: restart_button
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "T-Display Button 1"
    id: tdisplay_button_input_1
    on_click:
      - switch.turn_on: relay
  - platform: gpio
    name: Unlock Button
    pin:
      number: GPIO26
      mode:
        input: true
        pulldown: true
    on_press:
      - switch.turn_on: relay

script:
  - id: status_no_connection
    then:
      - logger.log: "No Connection"
      - light.turn_on:
          id: status_light
          effect: "Blink"
      - display.page.show: page_not_ok
      - component.update: my_display
      - light.turn_on: 
          id: backlight
          brightness: 100%
          transition_length: 0.5s
      - while:
          condition:
            not:
              wifi.connected:
          then:
            - delay: 250ms
      - component.update: my_display

  - id: status_wifi_connected
    then:
      - logger.log: "Wi-Fi Connected"
      - light.turn_on:
          id: status_light
          effect: "Fast Pulse"
      - display.page.show: page_not_ok
      - component.update: my_display
      - light.turn_on: 
          id: backlight
          brightness: 100%
          transition_length: 0.5s
      - while:
          condition:
            and:
              - wifi.connected:
              - not:
                  mqtt.connected:
          then:
            - delay: 250ms
      - component.update: my_display
      - delay: 250ms
      - script.execute: status_ready

  - id: status_ready
    then:
      - light.turn_on:
          id: status_light
          effect: "None"
      - display.page.show: page_ok
      - component.update: my_display
      - light.turn_on: 
          id: backlight
          brightness: 50%
          transition_length: 0.5s

  - id: gui_reset
    then:
      - if:
          condition:
            mqtt.connected:
          then:
            - light.turn_on:
                id: status_light
                effect: "None"
            - display.page.show: page_ok
            - component.update: my_display
            - light.turn_on: 
                id: backlight
                brightness: 50%
                transition_length: 0.5s
      - if:
          condition:
            - script.is_running: status_wifi_connected
          then:
            - script.stop: status_wifi_connected
      - if:
          condition:
            - script.is_running: status_no_connection
          then:
            - script.stop: status_no_connection

  - id: door_opened
    then:
      # - light.turn_off:
      #     id: status_light
      #     transition_length: 0s
      # - light.turn_on:
      #     id: status_light
      #     transition_length: 2s
      #     brightness: 100%
      - light.turn_on: 
          id: backlight
          brightness: 100%
          transition_length: 0s
      - display.page.show: page_door
      - component.update: my_display
      - light.turn_on:
          id: status_light
          effect: "Blink faster"
      - delay: 300ms
      - script.execute: gui_reset

switch:
  - platform: gpio
    name: "Door Relay"
    restore_mode: ALWAYS_OFF
    id: relay
    pin:
      number: GPIO27
      inverted: false
      mode:
        open_drain: false
        output: true
    on_turn_on:
      - script.execute: door_opened
      - delay: 200ms
      - switch.turn_off: relay

button:
  - platform: restart
    id: restart_button
    name: Restart

output:
  - platform: ledc
    id: output_status
    pin: GPIO25
  - platform: ledc
    id: backlight_led
    pin: GPIO4
    
image:
  - file: "doorlock/flag.png"
    id: british_flag
    resize: 240x135
    type: RGB24
  - file: "doorlock/error.png"
    id: error_icon
    resize: 100x100
    type: RGB24

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

time:
  - platform: sntp
    timezone: "Asia/Yerevan"
    id: sntp_time
    servers:
      - "minimi.lan"
      - "0.pool.ntp.org"
      - "1.pool.ntp.org"
  
display:
  - platform: st7789v
    id: my_display
    model: TTGO TDisplay 135x240
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    backlight_pin: no
    rotation: 270
    lambda: |-
      it.print(120, 67, id(roboto_36), id(my_white), TextAlign::CENTER, "Init...");
    pages:
      - id: page_okk
        lambda: |-
          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_gray));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_gray));   // header bar
          it.print(5, 5, id(roboto_12), id(my_yellow), TextAlign::TOP_LEFT, "Hacker Embassy");

          if (id(sntp_time).now().is_valid()) {
            it.strftime(120, 75, id(roboto_48), id(my_white), TextAlign::CENTER, "%H:%M:%S", id(sntp_time).now());
          } else {
            it.print(120, 82, id(roboto_36), id(my_gray), TextAlign::CENTER, "Time not set");
          }
          
          it.print(235, 5, id(roboto_12), id(my_green), TextAlign::TOP_RIGHT, "Online");

      - id: page_ok
        lambda: |-
          it.image(0, 0, id(british_flag));
      - id: page_not_ok
        lambda: |-
          it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_gray));
          it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_gray));   // header bar
          it.print(5, 5, id(roboto_12), id(my_yellow), TextAlign::TOP_LEFT, "Hacker Embassy");

          if (id(mqtt_connected)) {
              it.print(235, 5, id(roboto_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
          } else {
              it.print(235, 5, id(roboto_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
              it.image(82, 34, id(error_icon));
          }

          if (id(wifi_connected)) {
              it.print(120, 115, id(roboto_12), id(my_green), TextAlign::TOP_CENTER, "Wi-Fi connected");
          } else {
              it.print(120, 115, id(roboto_12), id(my_red), TextAlign::TOP_CENTER, "Wi-Fi disconnected");
          }
      - id: page_reset
        lambda: |-
          it.print(120, 67, id(roboto_36), id(my_white), TextAlign::CENTER, "Reset...");
      - id: page_door
        lambda: |-
          it.print(120, 67, id(roboto_36), id(my_green), TextAlign::CENTER, "OPEN");
      - id: page_time
        lambda: |-
          if (id(sntp_time).now().is_valid()) {
            it.strftime(120, 75, id(roboto_48), id(my_gray), TextAlign::CENTER, "%H:%M:%S", id(sntp_time).now());
          } else {
            it.print(120, 86, id(roboto_36), id(my_white), TextAlign::CENTER, "Time not set");
          }
      - id: page_ota
        lambda: |-
          it.print(120, 60, id(roboto_36), id(my_white), TextAlign::CENTER, "OTA flashing");
          it.printf(120, 93, id(roboto_36), id(my_white), TextAlign::CENTER, "%0.0f%%", id(ota_progress));

light:
  - platform: monochromatic
    name: "LCD Backlight"
    restore_mode: ALWAYS_ON
    id: backlight
    output: backlight_led
  - platform: monochromatic
    name: "Status Light"
    id: status_light
    output: output_status
    effects:
      - pulse:
      - pulse:
          name: "Very Fast Pulse"
          transition_length: 0.2s
          update_interval: 0.2s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.3s
          update_interval: 0.3s
      - pulse:
          name: "Slow Pulse"
          transition_length: 0.6s
          update_interval: 0.6s
      - strobe:
          name: Blink
          colors:
            - state: true
              brightness: 100%
              duration: 100ms
            - state: false
              duration: 100ms
      - strobe:
          name: Blink faster
          colors:
            - state: true
              brightness: 100%
              duration: 50ms
            - state: false
              duration: 50ms

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Roboto"
    id: roboto_12
    size: 12
  - file: "gfonts://Roboto"
    id: roboto_36
    size: 36
  - file: "gfonts://Roboto"
    id: roboto_48
    size: 48

web_server:
  port: 80
  local: true
  auth:
    username: admin
    password: !secret web_server_password
